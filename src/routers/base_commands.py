"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ (start, help) –∏ –∫–æ–ª–ª–±—ç–∫–∞ help
"""

from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command, or_f

from routers.utils import create_new_user
from keyboards.inline import get_callback_buttons
from core.services import user_service

router = Router(name=__name__)

start_page_text = "–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ IP –≤–∏–¥–µ–æ–∫–∞–º–µ—Ä. \
    \nüìö <b>Help page</b> - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º. \
    \nüìù <b>Main page</b> - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º."

help_page_text = """üìö Help page. \
\n–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ IP-–≤–∏–¥–µ–æ–∫–∞–º–µ—Ä. \
\n\n–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é. \
\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ—Ç, –Ω–µ—Å—ë—Ç –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, \
—Ç–æ—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ —Ü–µ–Ω—É –∫–∞–º–µ—Ä—ã —Å–ª–µ–¥—É–µ—Ç —É—Ç–æ—á–Ω—è—Ç—å —É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è (–ø—Ä–æ–¥–∞–≤—Ü–∞). \
\n\n–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤ –æ—Ç–≤–µ—Ç–µ –±–æ—Ç–∞ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ –º–æ–¥–µ–ª–∏ –∫–∞–º–µ—Ä—ã. \
–°—Å—ã–ª–∫–∏ –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 50 –º–æ–¥–µ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ. \
\n\n–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–ª–µ–¥—É–µ—Ç —É—á–µ—Å—Ç—å —á—Ç–æ: \
\n- –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç–º–µ—á–µ–Ω –∑–Ω–∞–∫–æ–º ‚ùå, —Ç–æ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. \
\n- –ü–∞—Ä–∞–º–µ—Ç—Ä "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ" –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, —á—Ç–æ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –∫–∞–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è. \
–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: –º–µ–≥–∞–ø–∏–∫—Å–µ–ª—å. \
\n- –ü–∞—Ä–∞–º–µ—Ç—Ä "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, —á—Ç–æ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –∫–∞–º–µ—Ä—ã —Å —Ç–∞–∫–∏–º –∏–ª–∏ –ª—É—á—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. \
–î–ª—è –≤–∏–¥–µ–æ–∫–∞–º–µ—Ä - —á–µ–º –º–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ. –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: –ª—é–∫—Å. \
\n- –ü–∞—Ä–∞–º–µ—Ç—Ä "–ò–ö-–ø–æ–¥—Å–≤–µ—Ç–∫–∞" –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, —á—Ç–æ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –∫–∞–º–µ—Ä—ã —Å —Ç–∞–∫–∏–º –∏–ª–∏ \
–ª—É—á—à–∏–º (–±–æ–ª—å—à–∏–º) –∑–Ω–∞—á–µ–Ω–∏–µ–º –¥–∞–ª—å–Ω–æ—Å—Ç–∏ –ò–ö-–ø–æ–¥—Å–≤–µ—Ç–∫–∏. –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: –º–µ—Ç—Ä. \
\n- –ü–∞—Ä–∞–º–µ—Ç—Ä "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, \
—á—Ç–æ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –∫–∞–º–µ—Ä—ã —Å —Ç–∞–∫–∏–º –∏–ª–∏ –ª—É—á—à–∏–º (–Ω–∏–∂–µ) –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: –≥—Ä–∞–¥—É—Å –¶–µ–ª—å—Å–∏—è. \
\n- –ü–∞—Ä–∞–º–µ—Ç—Ä "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, \
—á—Ç–æ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –∫–∞–º–µ—Ä—ã —Å —Ç–∞–∫–∏–º –∏–ª–∏ –ª—É—á—à–∏–º (–≤—ã—à–µ) –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: –≥—Ä–∞–¥—É—Å –¶–µ–ª—å—Å–∏—è. \
\n- –ü–∞—Ä–∞–º–µ—Ç—Ä "–°–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å" –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, —á—Ç–æ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –∫–∞–º–µ—Ä—ã, –∏–º–µ—é—â–∏–µ —Ç–∞–∫–æ–π —Ç–∏–ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. \
\n- –ü–∞—Ä–∞–º–µ—Ç—Ä "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ POE" –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, —á—Ç–æ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –∫–∞–º–µ—Ä—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ POE. \
\n- –ü–∞—Ä–∞–º–µ—Ç—Ä "–ì—Ä–æ–∑–æ–∑–∞—â–∏—Ç–∞" –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, —á—Ç–æ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –∫–∞–º–µ—Ä—ã, –∏–º–µ—é—â–∏–µ –≥—Ä–æ–∑–æ–∑–∞—â–∏—Ç—É. \
\n- –ü–∞—Ä–∞–º–µ—Ç—Ä "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –∫–∞–º–µ—Ä, \
–∏–º–µ—é—â–∏—Ö –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ ‚Ññ 969. \
\n\n–ë–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ Python –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç serverless-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ø–Ω–¥–µ–∫—Å –û–±–ª–∞–∫–∞."""

error_text = "Error\nPress /start"


@router.message(
    or_f(
        CommandStart(),
        F.text.lower() == "start",
        F.text.lower() == "—Å—Ç–∞—Ä—Ç",
    )
)
async def start_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ "—Å—Ç–∞—Ä—Ç"
    """
    await message.react(reaction=[{"type": "emoji", "emoji": "üî•"}])
    try:
        user_id = message.from_user.id
        if await user_service.check_by_id(user_id=user_id) == False:
            await create_new_user(user_id=user_id)
        await message.answer(
            text=start_page_text,
            reply_markup=get_callback_buttons(
                buttons={
                    "üìö Help page": "help",
                    "üìù Main page": "main",
                },
                sizes=(2,),
            ),
        )
    except Exception as e:
        print("error:", e)
        await message.answer(
            text=error_text,
        )


@router.message(
    or_f(
        Command("help"),
        F.text.lower() == "help",
    )
)
async def help_command(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ "help"
    """
    await message.react(reaction=[{"type": "emoji", "emoji": "üëÄ"}])
    try:
        user_id = message.from_user.id
        if await user_service.check_by_id(user_id=user_id) == False:
            await create_new_user(user_id=user_id)
        user_id_text = f"\nYou Telegram ID: {user_id}"
        await message.answer(
            text=help_page_text + user_id_text,
            reply_markup=get_callback_buttons(
                buttons={
                    "üìù Main page": "main",
                },
                sizes=(1,),
            ),
        )
    except Exception as e:
        print("error:", e)
        await message.answer(
            text=error_text,
        )


@router.callback_query(
    F.data == "help",
)
async def help_callback(callback: types.CallbackQuery):
    """
    –ö–æ–º–∞–Ω–¥–∞ "help" (–∫–æ–ª–ª–±—ç–∫)
    """
    try:
        user_id = callback.from_user.id
        user_id_text = f"\nYou Telegram ID: {user_id}"
        await callback.message.edit_text(
            text=help_page_text + user_id_text,
            reply_markup=get_callback_buttons(
                buttons={
                    "üìù Main page": "main",
                },
                sizes=(1,),
            ),
        )
    except Exception as e:
        print("error:", e)
        await callback.message.answer(
            text=error_text,
        )
