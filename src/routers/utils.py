"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

from core.services import user_service, camera_service
from core.entities import CreateUser


async def create_list_of_cameras(user_id: int) -> str:
    """
    —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä
    """
    user = await user_service.get_by_id(user_id=user_id)
    list_cameras = await camera_service.get_result(user=user)
    result = ""
    count = 1
    for i in list_cameras:
        if i != "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç":
            url_google = f'<a href="https://www.google.com/search?q={i}+ip+–≤–∏–¥–µ–æ–∫–∞–º–µ—Ä–∞">Googleüìñ</a>'
            # url_yandex_market = f'<a href="https://market.yandex.ru/search?text={i}">–Ø–Ω–¥–µ–∫—Åüõí</a>'
            url_yandex = (
                f'<a href="https://ya.ru/search?text={i}+ip+–≤–∏–¥–µ–æ–∫–∞–º–µ—Ä–∞">–Ø–Ω–¥–µ–∫—Åüõí</a>'
            )
            result = f"{result}{str(count)}. {i} {url_google} {url_yandex}\n"
            count += 1
        else:
            result = i
    return result


async def create_list_of_parameters(user_id: int) -> str:
    """
    —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """
    user = await user_service.get_by_id(user_id=user_id)
    result = "‚úÖ - —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏ –ø–æ–∏—Å–∫–µ\n‚ùå - –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä\n<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:</b>\n"
    if user.search_camera_resolution:
        result = f"{result}‚úÖ"
    else:
        result = f"{result}‚ùå"
    result = f"{result}–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {user.camera_resolution} –ú–ø\n"
    if user.search_camera_sensitivity_day_x10000:
        result = f"{result}‚úÖ"
    else:
        result = f"{result}‚ùå"
    result = (
        f"{result}–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {user.camera_sensitivity_day_x10000/10000} –ª–∫ –∏–ª–∏ –ª—É—á—à–µ\n"
    )
    if user.search_camera_IR_illumination:
        result = f"{result}‚úÖ"
    else:
        result = f"{result}‚ùå"
    result = f"{result}–ò–ö-–ø–æ–¥—Å–≤–µ—Ç–∫–∞: {user.camera_IR_illumination} –º –∏–ª–∏ –¥–∞–ª—å—à–µ\n"
    if user.search_camera_operating_temperature_min:
        result = f"{result}‚úÖ"
    else:
        result = f"{result}‚ùå"
    result = (
        f"{result}–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (min): {user.camera_operating_temperature_min} ¬∞C –∏–ª–∏ –Ω–∏–∂–µ\n"
    )
    if user.search_camera_operating_temperature_max:
        result = f"{result}‚úÖ"
    else:
        result = f"{result}‚ùå"
    result = (
        f"{result}–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (max): {user.camera_operating_temperature_max} ¬∞C –∏–ª–∏ –≤—ã—à–µ\n"
    )
    if user.search_camera_data_transfer_interface:
        result = f"{result}‚úÖ"
    else:
        result = f"{result}‚ùå"
    result = f"{result}–°–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {user.camera_data_transfer_interface}\n"
    if user.search_camera_power_supply_poe:
        result = f"{result}‚úÖ"
    else:
        result = f"{result}‚ùå"
    result = f"{result}–ü–æ–¥–¥–µ—Ä–∂–∫–∞ POE: –ï—Å—Ç—å\n"
    if user.search_camera_lightning_protection:
        result = f"{result}‚úÖ"
    else:
        result = f"{result}‚ùå"
    result = f"{result}–ì—Ä–æ–∑–æ–∑–∞—â–∏—Ç–∞: –ï—Å—Ç—å\n"
    if user.search_camera_comment:
        result = f"{result}‚úÖ"
    else:
        result = f"{result}‚ùå"
    result = f"{result}–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user.camera_comment}\n"
    return result


async def create_new_user(user_id: int) -> bool:
    try:
        new_user = CreateUser(
            user_id=user_id,
        )
        await user_service.add(user_info=new_user)
        return True
    except Exception as e:
        print("error:", e)
        return False
